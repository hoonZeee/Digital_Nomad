name: Java CI , Gradle

on:
  push:
    branches: [ "main" ]
    # main 브랜치에 push or pullrequest가 merge 될 시 동작한다.

#jobs - 하나이상의 작업을 정한다. 병렬로 수행될수있음.
jobs:
  #deploy - job name
  deploy:
    #ubuntu-latest 리눅스 (우분투) 환경에서 실행
    runs-on: ubuntu-latest

    #deploy job 안에서 실행될 단계들 작성
    steps:
      # 소스코드 체크아웃 후 java21 설치
      - uses: actions/checkout@v3
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'
      # gradle 빌드를 위해 ./gradlew 파일의 권한 설정
      - name: Run chmod to make gradlew executable
        run: chmod +x ./gradlew
        # +x --> 실행권한 부여
      # java 빌드
      - name: Spring boot Build
        run: ./gradlew clean build
      # Docker image build , Dockerfile 기반으로 Docker image 빌드
      - name: docker image Build
        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKER_CONTAINER_NAME }} .
      # Docker hub 로그인 - 도커허브에 이미지를 푸쉬하기 위함.
      - name: docker login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: image push to docker Hub
        run: docker push ${{ secrets.DOCKERHUB_USERNAME}}/${{ secrets.DOCKER_CONTAINER_NAME }}

      # GitHub Actions의 퍼블릭 IP 가져오기
      - name: Get GitHub Actions Public IP
        id: ip
        uses: haythem/public-ip@v1.2

      # Aws 접근권한 취득(IAM)
      - name: Configure Aws Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      # Github ip  -> Aws에 추가
      - name: Add Ip to Aws
        run : |
          aws ec2 authorize-security-group-ingress \
            --group-id ${{ secrets.AWS_SG_ID }} \
            --protocol tcp \
            --port 22 \
            --cidr ${{ steps.ip.outputs.ipv4 }}/32
      # pem key 방식으로 ssh 접속
      - name: AWS EC2 Connection
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: |
            sudo docker stop ${{ secrets.DOCKER_CONTAINER_NAME }}
            sudo docker rm ${{ secrets.DOCKER_CONTAINER_NAME }}
            sudo docker rmi ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKER_CONTAINER_NAME }}
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKER_CONTAINER_NAME }}
            sudo docker run -it -d -p 8080:8080 --name ${{ secrets.DOCKER_CONTAINER_NAME }} ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKER_CONTAINER_NAME }}

      # 보안 그룹에서 GitHub IP 제거
      - name: Remove GitHub IP from EC2 Security Group
        run: |
          aws ec2 revoke-security-group-ingress \
            --group-id ${{ secrets.AWS_SG_ID }} \
            --protocol tcp \
            --port 22 \
            --cidr ${{ steps.ip.outputs.ipv4 }}/32